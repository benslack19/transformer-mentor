[project]
name = "transformer-mentor"
version = "0.1.0"
description = "A comprehensive repository for learning and building Transformer models from scratch."
authors = [
    { name = "benslack19", email = "your.email@example.com" }
]
license = { text = "MIT" }
readme = "README.md"
requires-python = ">=3.12"
keywords = ["transformers", "deep-learning", "pytorch", "huggingface", "machine-learning", "ai"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Education"
]

dependencies = [
    "pandas>=2.2.0",
    "torch>=2.3.0", # Adjust if you target specific CUDA versions for cloud GPUs later
    "torchvision>=0.16.0",
    "torchtext>=0.18.0",
    "transformers>=4.0.0",
    "datasets>=2.0.0",
    "tqdm>=4.0.0",
    "numpy>=1.20.0",
    "scikit-learn>=1.0.0",
    "matplotlib>=3.0.0",
    "jupyter>=1.0.0",
    "ipywidgets>=7.0.0",
    "sentencepiece>=0.1.99", # Common for many Transformer tokenizers
    "tokenizers>=0.19.0",
    "lightning>=2.3.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "ruff>=0.5.0", # Ruff for linting and formatting
    "pre-commit>=3.0.0", # Add pre-commit here
    "mypy>=1.0.0", # For static type checking (optional, but good practice)
    "build>=1.0.0", # For building packages
    "twine>=4.0.0", # For uploading to PyPI
    "watermark"
]

[project.urls]
Homepage = "https://github.com/your-username/transformer-mentor" # Update this
"Bug Tracker" = "https://github.com/your-username/transformer-mentor/issues" # Update this

[tool.setuptools.packages.find]
exclude = ["local_data", "notebooks*"]

[tool.hatch.envs.default]
# This section remains the same, Hatch will pick up dev dependencies
# when installing via `pip install -e .[dev]` or similar.

[tool.ruff]
line-length = 120
target-version = "py312"
select = [
    "E",  # Error
    "W",  # Warning
    "F",  # Pyflakes
    "I",  # isort
    "N",  # Naming
    "D",  # Docstrings (can be adjusted for strictness)
    "UP", # pyupgrade
    "PL", # Pylint (subset)
    "SIM",# flake8-simplify
    "ANN",# flake8-annotations (can be adjusted for strictness)
    "ASYNC",# flake8-async
    "A",  # flake8-builtins
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "TID",# flake8-tidy-imports
    "PERF",# perflint
    "RUF" # Ruff-specific rules
]
ignore = [
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in public method
    "D203", # 1 blank line required before class docstring
    "D213", # Multi-line docstring summary on a separate line
    "ANN101", # Missing type annotation for self in method
    "ANN102", # Missing type annotation for cls in classmethod
    "PLR0913" # Too many arguments in function
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "env",
    "venv"
]

[tool.ruff.per-file-ignores]
"*.py" = ["D"] # Ignore all docstring warnings in Python files globally
"notebooks/*" = ["D", "E501", "F401", "F841"] # More lenience for notebooks

# ... (other tool configurations like mypy, if added)
